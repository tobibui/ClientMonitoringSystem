/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clientmonitoring;


import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.*;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author tinh.pv
 */
public class MainForm extends javax.swing.JFrame {

    
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblInfor = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMonitor = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableLstClient = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearchLog = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setPreferredSize(new java.awt.Dimension(432, 50));

        lblInfor.setText("IP & Port");
        lblInfor.setMaximumSize(new java.awt.Dimension(100, 16));
        lblInfor.setPreferredSize(new java.awt.Dimension(300, 20));
        jPanel2.add(lblInfor);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        jPanel2.add(btnStart);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setPreferredSize(new java.awt.Dimension(432, 500));

        tableMonitor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Thời điểm", "Action", "IP Client", "Diễn giải"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableMonitor);

        tableLstClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "IP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableLstClient);

        jLabel1.setText("Filter client:");

        jLabel2.setText("Filter log:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchLog, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearchLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static final int NUM_OF_THREAD = 4;
    public final static int SERVER_PORT = 7000;
    public final static String FilePath = "C:\\ClientMonitoringSystem\\Data";
    ExecutorService executor = Executors.newFixedThreadPool(NUM_OF_THREAD);
    ServerSocket serverSocket = null;
    Socket socket = null;
    
    
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
 
        try {
            serverSocket = new ServerSocket(SERVER_PORT);
            System.out.println("Bem: " + SERVER_PORT);
            writeLog("Server " +serverSocket.getInetAddress().getLocalHost().getHostAddress() + ":" + SERVER_PORT + " is started");
            lblInfor.setText("Waiting for client connections on: " + serverSocket.getInetAddress().getLocalHost().getHostAddress() + ":" + SERVER_PORT);
            AcceptConnect rt = new AcceptConnect(serverSocket);
            rt.start();
            FilterClient tb = new FilterClient();
            tb.start();
            FilterLog fl = new FilterLog();
            fl.start();
        } catch (IOException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    class AcceptConnect extends Thread{
        private ServerSocket _serverSocket;
        public AcceptConnect(ServerSocket serverSocket)
        {
            this._serverSocket = serverSocket;
        }
        @Override
        public void run()
        {
            while (!_serverSocket.isClosed())
            {
                try
                {
                    //Call the callback whenever accepting a new connection
                    Socket ss = _serverSocket.accept();
                    WorkWithClient th  = new WorkWithClient(ss);
                    th.start();
                }
                catch (Exception e)
                {
                }
            }
        }
    }
    
    class WorkWithClient extends Thread
    {
        private Socket socket;
        //private JTable _table;
        public WorkWithClient(Socket socket) {
            this.socket = socket;
        }
        @Override
        public void run() {
            try {
                writeLog("Client: " + socket.getInetAddress().getLocalHost().getHostAddress().toString()+ ":" + socket.getPort() + " connect to Server");
                //DataInputStream dis = new DataInputStream(socket.getInputStream());
                //ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
                DataOutputStream dos = new DataOutputStream(socket.getOutputStream());

                DefaultTableModel model = (DefaultTableModel) tableLstClient.getModel();
                TableRefresh Clientth = new TableRefresh(model);
                int rowCount = model.getRowCount();
                model.addRow(new Object[]{rowCount + 1, (socket.getInetAddress().getLocalHost().getHostAddress().toString() + ":"+ String.valueOf(socket.getPort())) });
                Clientth.start();
                //Gửi thông báo đường dẫn thư mục giám sát cho client
                dos.writeUTF(FilePath);
                writeLog("Monitor folder: " + FilePath);
                dos.flush();
                ReceiveMessage rc = new ReceiveMessage(socket);
                rc.start();
            } catch (IOException e) {

            }  
        }
    }
    
    class ReceiveMessage extends Thread{
        private Socket socket;
        private ObjectInputStream ois;
        public ReceiveMessage(Socket socket) throws IOException
        {
            this.socket = socket;
            this.ois = new ObjectInputStream(socket.getInputStream());
        }
        @Override
        public void run()
        {
            while(true)
            {
                try {
                    Message m = (Message) ois.readObject();//tableMonitor
                    if(m != null)
                    {
                        DefaultTableModel model = (DefaultTableModel) tableMonitor.getModel();
                        TableRefresh Clientth = new TableRefresh(model);
                        int rowCount = model.getRowCount();
                        model.addRow(new Object[]{rowCount + 1, m.getTime() , m.getAction(), (socket.getInetAddress().getLocalHost().getHostAddress().toString() + ":"+ String.valueOf(socket.getPort())), m.getDescription() });
                        Clientth.start();
                        writeLog(socket.getInetAddress().getLocalHost().getHostAddress().toString()+ ":" + socket.getPort() + ": Change " +m.getAction()+ " " + m.getTime() + " " + m.getDescription());
                        
                    }
                    
                    
                } catch (IOException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    
    class TableRefresh extends Thread{
        private final DefaultTableModel _model;
        public TableRefresh(DefaultTableModel model)
        {
            this._model = model;
        }
        @Override
        public void run()
        {
            try {
                SwingUtilities.invokeLater(new Runnable() {
                @Override
                    public void run() {
                        _model.fireTableDataChanged();
                    }
                });
                Thread.sleep(1000);
            } catch (Exception e) {
            }
   
        }
    }
    
    class FilterClient extends Thread{
        public FilterClient()
        {
        }
        @Override
        public void run()
        {
            try {
                TableRowSorter<TableModel> sort = new TableRowSorter<>(tableLstClient.getModel());
                tableLstClient.setRowSorter(sort);
                SwingUtilities.invokeLater(new Runnable(){
                    @Override
                    public void run() {
                        txtSearch.getDocument().addDocumentListener(new DocumentListener() {
                        @Override
                            public void insertUpdate(DocumentEvent e) {
                                String str = txtSearch.getText();
                                if (str.trim().length() == 0) {
                                    sort.setRowFilter(null);
                                } else {
                                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
                                }
                            }

                            @Override
                            public void removeUpdate(DocumentEvent e) {
                                String str = txtSearch.getText();
                                if (str.trim().length() == 0) {
                                    sort.setRowFilter(null);
                                } else {
                                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
                                }
                            }

                            @Override
                            public void changedUpdate(DocumentEvent e) {
                                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                            }
                        });
                    }
                });
                
                
            } catch (Exception e) {
            }
        }
    }
    
    //Filter log trên server
    class FilterLog extends Thread{
        public FilterLog()
        {
        }
        @Override
        public void run()
        {
            try {
                TableRowSorter<TableModel> sort = new TableRowSorter<>(tableMonitor.getModel());
                tableMonitor.setRowSorter(sort);
                SwingUtilities.invokeLater(new Runnable(){
                    @Override
                    public void run() {
                        txtSearchLog.getDocument().addDocumentListener(new DocumentListener() {
                        @Override
                            public void insertUpdate(DocumentEvent e) {
                                String str = txtSearchLog.getText();
                                if (str.trim().length() == 0) {
                                    sort.setRowFilter(null);
                                } else {
                                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
                                }
                            }

                            @Override
                            public void removeUpdate(DocumentEvent e) {
                                String str = txtSearchLog.getText();
                                if (str.trim().length() == 0) {
                                    sort.setRowFilter(null);
                                } else {
                                    sort.setRowFilter(RowFilter.regexFilter("(?i)" + str));
                                }
                            }

                            @Override
                            public void changedUpdate(DocumentEvent e) {
                                throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
                            }
                        });
                    }
                });
                
                
            } catch (Exception e) {
            }
        }
    }
    
    //Ghi log Server
    private static void writeLog(String info) {
        String filename = "LogServer.txt";
        BufferedWriter bw = null;
        FileWriter fw = null;
        try {
            fw = new FileWriter(filename, true);
            bw = new BufferedWriter(fw);
            bw.write(info);
            bw.write("\n");
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bw != null)
                    bw.close();
                if (fw != null)
                    fw.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblInfor;
    private javax.swing.JTable tableLstClient;
    private javax.swing.JTable tableMonitor;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchLog;
    // End of variables declaration//GEN-END:variables

}
