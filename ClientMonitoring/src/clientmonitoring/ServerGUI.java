/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clientmonitoring;

import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author tuyen
 */
public class ServerGUI extends javax.swing.JFrame {

    /**
     * Creates new form ServerGUI
     */
    public ServerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelIP = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputPort = new javax.swing.JTextPane();
        labelPort = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableClient = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableLog = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        inputFilterLog = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        inputFilterClient = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelIP.setText("IP:");

        btnStart.setText("Start Server");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(inputPort);

        labelPort.setText("Port:");

        tableClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "IP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableClient);
        if (tableClient.getColumnModel().getColumnCount() > 0) {
            tableClient.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        tableLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#Num", "Time", "Action", "IP Client", "Content"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableLog);
        if (tableLog.getColumnModel().getColumnCount() > 0) {
            tableLog.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Filter client:");

        jLabel2.setText("Filter log:");

        jScrollPane5.setViewportView(inputFilterLog);

        jScrollPane6.setViewportView(inputFilterClient);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelIP, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(labelPort)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnStart))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelIP)
                        .addComponent(btnStart)
                        .addComponent(labelPort)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public final static String PathMoitoring = "C:\\ClientMonitoringSystem\\Data";
    ServerSocket serverSocket = null;
    Socket socket = null;
    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        try {
            Integer PORT = Integer.parseInt(inputPort.getText());
            serverSocket = new ServerSocket(PORT);
            labelIP.setText("IP: " + serverSocket.getInetAddress().getLocalHost().getHostAddress());
            Guard rt = new Guard(serverSocket);
            rt.start();
            SearchClient searchClient = new SearchClient();
            searchClient.start();
            SearchLog search = new SearchLog();
            search.start();
        } catch (IOException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGUI().setVisible(true);
            }
        });
    }

    class Guard extends Thread {

        private ServerSocket server;

        public Guard(ServerSocket serverSocket) {
            this.server = serverSocket;
        }

        @Override
        public void run() {
            while (!server.isClosed()) {
                try {
                    Socket socketSession = server.accept();
                    BridgeClient brigdeClient = new BridgeClient(socketSession);
                    brigdeClient.start();
                } catch (IOException e) {
                }
            }
        }
    }

    class BridgeClient extends Thread {

        private Socket socket;

        public BridgeClient(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                saveLog("Client: "
                        + socket.getInetAddress().getHostAddress()
                        + ":"
                        + socket.getPort()
                        + " connect to Server"
                );
                DataOutputStream dataOutput = new DataOutputStream(socket.getOutputStream());

                DefaultTableModel model = (DefaultTableModel) tableClient.getModel();
                RenewTable renewClient = new RenewTable(model);
                int countLine = model.getRowCount();
                model.addRow(new Object[]{
                    countLine + 1,
                    (socket.getInetAddress().getHostAddress()
                    + ":"
                    + String.valueOf(socket.getPort()))
                });
                renewClient.start();
                dataOutput.writeUTF(PathMoitoring);
                saveLog("Listening folder: " + PathMoitoring);
                dataOutput.flush();
                ListentAction listenAction = new ListentAction(socket);
                listenAction.start();
            } catch (IOException e) {

            }
        }
    }

    class ListentAction extends Thread {

        private Socket socket;
        private ObjectInputStream ois;

        public ListentAction(Socket socket) throws IOException {
            this.socket = socket;
            this.ois = new ObjectInputStream(socket.getInputStream());
        }

        @Override
        public void run() {
            while (true) {
                try {
                    Message message = (Message) ois.readObject();
                    if (message != null) {
                        DefaultTableModel model = (DefaultTableModel) tableLog.getModel();
                        RenewTable renewTable = new RenewTable(model);
                        int rowCount = model.getRowCount();
                        model.addRow(
                                new Object[]{
                                    rowCount + 1,
                                    message.getTime(),
                                    message.getAction(),
                                    (socket.getInetAddress()
                                            .getHostAddress() + ":" + String.valueOf(socket.getPort())),
                                    message.getDescription()});
                        renewTable.start();
                        saveLog(socket.getInetAddress().getHostAddress()
                                + ":" + socket.getPort()
                                + " => Hành động: "
                                + message.getAction()
                                + " | Thời gian: "
                                + message.getTime()
                                + " | Mô tả: "
                                + message.getDescription()
                        );

                    }
                } catch (IOException | ClassNotFoundException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    class RenewTable extends Thread {

        private final DefaultTableModel dataModel;

        public RenewTable(DefaultTableModel model) {
            this.dataModel = model;
        }

        @Override
        public void run() {
            try {
                SwingUtilities.invokeLater(dataModel::fireTableDataChanged);
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }

        }
    }

    class SearchClient extends Thread {

        public SearchClient() {
        }

        @Override
        public void run() {
            try {
                TableRowSorter<TableModel> sorted = new TableRowSorter<>(tableClient.getModel());
                tableClient.setRowSorter(sorted);
                SwingUtilities.invokeLater(() -> {
                    inputFilterClient
                            .getDocument()
                            .addDocumentListener(new DocumentListener() {
                                @Override
                                public void insertUpdate(DocumentEvent e) {
                                    String str = inputFilterClient.getText();
                                    sorted.setRowFilter(null);
                                    if (str.trim().length() > 0) {
                                        sorted.setRowFilter(
                                                RowFilter.regexFilter("(?i)" + str)
                                        );
                                    }
                                }

                                @Override
                                public void removeUpdate(DocumentEvent e) {
                                    String str = inputFilterClient.getText();
                                    sorted.setRowFilter(null);
                                    if (str.trim().length() > 0) {
                                        sorted.setRowFilter(RowFilter.regexFilter("(?i)" + str));
                                    }
                                }

                                @Override
                                public void changedUpdate(DocumentEvent e) {
                                    throw new UnsupportedOperationException("Not SP.");
                                }
                            });
                });
            } catch (Exception e) {
            }
        }
    }

    //Filter log trên server
    class SearchLog extends Thread {

        public SearchLog() {
        }

        @Override
        public void run() {
            try {
                TableRowSorter<TableModel> sorted = new TableRowSorter<>(tableLog.getModel());
                tableLog.setRowSorter(sorted);
                SwingUtilities.invokeLater(() -> {
                    inputFilterLog.getDocument()
                            .addDocumentListener(
                                    new DocumentListener() {
                                @Override
                                public void insertUpdate(DocumentEvent e) {
                                    String inputData = inputFilterLog.getText();
                                    sorted.setRowFilter(null);
                                    if (inputData.trim().length() > 0) {
                                        sorted.setRowFilter(
                                                RowFilter.regexFilter("(?i)" + inputData)
                                        );
                                    }
                                }

                                @Override
                                public void removeUpdate(DocumentEvent e) {
                                    String inputData = inputFilterLog.getText();
                                    sorted.setRowFilter(null);
                                    if (inputData.trim().length() > 0) {
                                        sorted.setRowFilter(
                                                RowFilter.regexFilter("(?i)" + inputData)
                                        );
                                    }
                                }

                                @Override
                                public void changedUpdate(DocumentEvent e) {
                                    throw new UnsupportedOperationException("Not SP.");
                                }
                            });
                });

            } catch (Exception e) {
            }
        }
    }

    //Ghi log Server
    private static void saveLog(String log) throws IOException {
        String filename = "log/server.txt";
        try ( FileWriter fw = new FileWriter(filename, true)) {
            fw.write(log + "\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JTextPane inputFilterClient;
    private javax.swing.JTextPane inputFilterLog;
    private javax.swing.JTextPane inputPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel labelIP;
    private javax.swing.JLabel labelPort;
    private javax.swing.JTable tableClient;
    private javax.swing.JTable tableLog;
    // End of variables declaration//GEN-END:variables
}
